package {{package}};

{{#imports}}import {{import}};
{{/imports}}

import javax.ws.rs.*;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriBuilder;

import java.net.URI;
import java.util.List;

/**
 * The {{baseName}} API
 */
@Path("/{{baseName}}"){{#hasConsumes}}
@Consumes({ {{#consumes}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/consumes}} }){{/hasConsumes}}{{#hasProduces}}
@Produces({ {{#produces}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/produces}} }){{/hasProduces}}
{{>generatedAnnotation}}
public interface {{classname}}  {
{{#operations}}
{{#operation}}

    /**
     * {{{summary}}}.
     * {{{notes}}}
     * {{#hasAuthMethods}}Authentication:<br>
     *  {{#authMethods}}"{{name}}"{{#isOAuth}}<br>
     *  scopes:<br>
	 *  <ul>
     *      {{#scopes}}<li>{{scope}}: {{description}}"){{#hasMore}}</li>
     *      {{/hasMore}}
     *  </ul>{{/scopes}}
     *  {{/isOAuth}}){{#hasMore}},
     *  {{/hasMore}}{{/authMethods}}
     * {{/hasAuthMethods}}
     * {{#vendorExtensions.x-tags}}"{{tag}}"{{#hasMore}}, {{/hasMore}}{{/vendorExtensions.x-tags}}<br>
     * <ul>{{#responses}}<li> {{{code}}}: {{{message}}}</li>
     * {{/responses}}</ul>
     */
    @{{httpMethod}}{{#subresourceOperation}}
	@Path("{{path}}"){{/subresourceOperation}}{{#hasConsumes}}
	@Consumes({ {{#consumes}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/consumes}} }){{/hasConsumes}}{{#hasProduces}}
	@Produces({ {{#produces}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/produces}} }){{/hasProduces}}
    public {{>actualReturnType}} {{nickname}}({{#allParams}}{{>queryParams}}{{>pathParams}}{{>headerParams}}{{>bodyParams}}{{>formParams}}{{#hasMore}},{{/hasMore}}{{/allParams}});
{{/operation}}

{{#operation}}
    /**
     * Generates a URI with the path and query components set so that they refer
     * to the {{path}} subresource. Note that the application base and context paths
     * will be missing and need to be prefixed.
     * {{^pathParams.isEmpty}}Path templates are expanded to match given path parameters{{/pathParams.isEmpty}}
     * {{^queryParams.isEmpty}}Query params are appended to reflect the passed query parameters{{/queryParams.isEmpty}}
     * {{#pathParams}}@param {{baseName}}{{/pathParams}}
     * {{#queryParams}}@param {{baseName}}{{/queryParams}}
     */
    public static URI {{nickname}}URI({{#pathParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/pathParams}}{{^pathParams.isEmpty}}{{^queryParams.isEmpty}}, {{/queryParams.isEmpty}}{{/pathParams.isEmpty}}{{#queryParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/queryParams}}) {
        UriBuilder b = UriBuilder.fromResource({{classname}}.class)
            .path("{{path}}")
            {{#pathParams}}.resolveTemplate("{{baseName}}", {{paramName}})
            {{/pathParams}};
		{{#queryParams}}if({{paramName}}!=null) {
			b.queryParam("{{baseName}}", {{paramName}});
		}{{/queryParams}};
		return b.build();
    }
{{/operation}}
}
{{/operations}}

